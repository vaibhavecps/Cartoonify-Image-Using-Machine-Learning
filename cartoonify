import cv2 #for image processing
import easygui #to open the filebox
import numpy as np #to store image
import imageio #to read image stored at particular path
import sys
import matplotlib.pyplot as plt
import os
import tkinter as tk
from tkinter import filedialog
from tkinter import *
from PIL import ImageTk, Image

def upload():
    ImagePath=easygui.fileopenbox()
    originalmage = cv2.imread(ImagePath)
    originalmage = cv2.cvtColor(originalmage, cv2.COLOR_BGR2RGB)
#print(image)  # image is stored in form of numbers
# confirm that image is chosen
    if originalmage is None:
        print("Can not find any image. Choose appropriate file")
        sys.exit()
    ReSized1 = cv2.resize(originalmage, (960, 540))
    grayScaleImage = cv2.cvtColor(originalmage, cv2.COLOR_BGR2GRAY)
    ReSized2 = cv2.resize(grayScaleImage, (960, 540))
    smoothGrayScale = cv2.medianBlur(grayScaleImage, 5)
    ReSized3 = cv2.resize(smoothGrayScale, (960, 540))
    getEdge = cv2.adaptiveThreshold(smoothGrayScale, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
    ReSized4 = cv2.resize(getEdge, (960, 540))
    colorImage = cv2.bilateralFilter(originalmage, 9, 300, 300)
    ReSized5 = cv2.resize(colorImage, (960, 540))
    cartoonImage = cv2.bitwise_and(colorImage, colorImage, mask=getEdge)
    ReSized6 = cv2.resize(cartoonImage, (950, 540))
    cv2.imshow( "cartoon",ReSized6) 
    cv2.waitKey(0) # "0" is Used to close the image window
    cv2.destroyAllWindows()    

def uploa():
    Image=easygui.fileopenbox()
    image = cv2.imread(Image)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) 
    gray = cv2.medianBlur(gray, 7) 
    edges = cv2.adaptiveThreshold(gray, 100, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 7)
    color = cv2.bilateralFilter(image, 12, 500, 250) 
    cartoon = cv2.bitwise_and(color, color, mask=edges)
#convert to gray scale
    grayImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#apply gaussian blur
    grayImage = cv2.GaussianBlur(grayImage, (3, 3), 0)
    grayImage = cv2.medianBlur(grayImage, 7)
#detect edges
    edgeImage = cv2.Laplacian(grayImage, -1, ksize=5)
    edgeImage = 255 - edgeImage
#threshold image
    ret, edgeImage = cv2.threshold(edgeImage, 150, 255, cv2.THRESH_BINARY)
#blur images heavily using edgePreservingFilter
    edgePreservingImage = cv2.edgePreservingFilter(image, flags=2, sigma_s=50, sigma_r=0.4)
#create output matrix
    output =np.zeros(grayImage.shape)
#combine cartoon image and edges image
    output = cv2.bitwise_and(edgePreservingImage, edgePreservingImage, mask=edgeImage)
#Visualize the cartoon image 
    cv2.imshow( "cartoon",output) 
    cv2.waitKey(0) # "0" is Used to close the image window
    cv2.destroyAllWindows()
    

def uplo():
    Image=easygui.fileopenbox()
    image = cv2.imread(Image)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) 
    gray = cv2.medianBlur(gray, 7) 
    edges = cv2.adaptiveThreshold(gray, 100, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 7)
    color = cv2.bilateralFilter(image, 12, 500, 250) 
    cartoon = cv2.bitwise_and(color, color, mask=edges)
    grayImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    grayImage = cv2.GaussianBlur(grayImage, (3, 3), 0)
    cartoon_image1, cartoon_image2  = cv2.pencilSketch(image, sigma_s=600, sigma_r=0.5, shade_factor=0.02)  
    cv2.imshow( "cartoon",grayImage) 
    cv2.waitKey(0) # "0" is Used to close the image window
    cv2.destroyAllWindows()
    

def up():
    Image=easygui.fileopenbox()
    image = cv2.imread(Image)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) 
    gray = cv2.medianBlur(gray, 7) 
    edges = cv2.adaptiveThreshold(gray, 100, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 7, 7)
    color = cv2.bilateralFilter(image, 12, 500, 250) 
    cartoon = cv2.bitwise_and(color, color, mask=edges)
    grayImage = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    grayImage = cv2.GaussianBlur(grayImage, (3, 3), 0)
    cartoon_image1, cartoon_image2  = cv2.pencilSketch(image, sigma_s=600, sigma_r=0.5, shade_factor=0.02)  
    cv2.imshow("cartoon", cartoon_image1)  
    cv2.waitKey()  
    cv2.destroyAllWindows()

top=tk.Tk()
top.geometry('800x800')
top.title('Cartoonify Your Image !')
top.configure(background='white')
label=Label(top,background='#CDCDCD', font=('calibri',20,'bold'))

uploa=Button(top,text="cartoon Image",command=uploa,padx=10,pady=5)
uploa.configure(background='#364156', foreground='white',font=('calibri',10,'bold'))
uploa.pack(side=TOP,pady=50)

uplo=Button(top,text="gray Image",command=uplo,padx=10,pady=5)
uplo.configure(background='#364156', foreground='white',font=('calibri',10,'bold'))
uplo.pack(side=TOP,pady=50)

upload=Button(top,text="blue filter an Image",command=upload,padx=10,pady=5)
upload.configure(background='#364156', foreground='white',font=('calibri',10,'bold'))
upload.pack(side=TOP,pady=50)

up=Button(top,text="sketch Image",command=up,padx=10,pady=5)
up.configure(background='#364156', foreground='white',font=('calibri',10,'bold'))
up.pack(side=TOP,pady=50)

top.mainloop()





